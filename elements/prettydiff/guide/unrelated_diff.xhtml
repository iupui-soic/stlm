<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.1//EN' 'http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd'>
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>Pretty Diff - A Diff Algorithm</title>
        <link href="../css/index.css" media="all" rel="stylesheet" type="text/css"/>
        <link
            href="http://prettydiff.com/overview.xhtml"
            rel="canonical"
            type="application/xhtml+xml"/>
        <link
            href="http://prettydiff.com/images/favicon.ico"
            rel="icon"
            type="image/x-icon"/>
        <link
            href="http://prettydiff.com/labels.rdf"
            rel="meta"
            title="ICRA labels"
            type="application/rdf+xml"/>
        <meta content="width=device-width, initial-scale=1" name="viewport"/>
        <meta content="index, follow" name="robots"/>
        <meta content="Pretty Diff - Overview" name="DC.title"/>
        <meta
            content="(pics-1.1 &#x22;http://www.icra.org/pics/vocabularyv03/&#x22; l gen true for &#x22;http://prettydiff.com&#x22; r (n 0 s 0 v 0 l 0 oa 0 ob 0 oc 0 od 0 oe 0 of 0 og 0 oh 0 c 1) gen true for &#x22;http://www.prettydiff.com&#x22; r (n 0 s 0 v 0 l 0 oa 0 ob 0 oc 0 od 0 oe 0 of 0 og 0 oh 0 c 1))"
            http-equiv="pics-Label"/>
        <meta content="Austin Cheney" name="author"/>
        <meta
            content="Pretty Diff tool can minify, beautify (pretty-print), or diff between minified and beautified code. This tool can even beautify and minify HTML."
            name="description"/>
        <meta content="Global" name="distribution"/>
        <meta content="en" http-equiv="Content-Language"/>
        <meta content="application/xhtml+xml;charset=UTF-8" http-equiv="Content-Type"/>
        <meta content="blendTrans(Duration=0)" http-equiv="Page-Enter"/>
        <meta content="blendTrans(Duration=0)" http-equiv="Page-Exit"/>
        <meta content="text/css" http-equiv="content-style-type"/>
        <meta content="application/javascript" http-equiv="content-script-type"/>
        <meta
            content="qL8AV9yjL2-ZFGV9ey6wU3t7pTZdpD4lIetUSiNen7E"
            name="google-site-verification"/>
    </head>
    <body class="white" id="prettydiff">
        <div class="contentarea" id="documentation">
            <section role="heading">
                <h1>
                    <svg
                        height="2000.000000pt"
                        id="pdlogo"
                        preserveAspectRatio="xMidYMid meet"
                        version="1.0"
                        viewBox="0 0 2000.000000 2000.000000"
                        width="2000.000000pt"
                        xmlns="http://www.w3.org/2000/svg">
                        <g
                            fill="#999"
                            stroke="none"
                            transform="translate(0.000000,2000.000000) scale(0.100000,-0.100000)">
                            <path
                                d="M14871 18523 c-16 -64 -611 -2317 -946 -3588 -175 -660 -319 -1202 -320 -1204 -2 -2 -50 39 -107 91 -961 876 -2202 1358 -3498 1358 -1255 0 -2456 -451 -3409 -1279 -161 -140 -424 -408 -560 -571 -507 -607 -870 -1320 -1062 -2090 -58 -232 -386 -1479 -2309 -8759 -148 -563 -270 -1028 -270 -1033 0 -4 614 -8 1365 -8 l1364 0 10 38 c16 63 611 2316 946 3587 175 660 319 1202 320 1204 2 2 50 -39 107 -91 543 -495 1169 -862 1863 -1093 1707 -568 3581 -211 4965 946 252 210 554 524 767 796 111 143 312 445 408 613 229 406 408 854 525 1320 57 225 380 1451 2310 8759 148 563 270 1028 270 1033 0 4 -614 8 -1365 8 l-1364 0 -10 -37z m-4498 -5957 c477 -77 889 -256 1245 -542 523 -419 850 -998 954 -1689 18 -121 18 -549 0 -670 -80 -529 -279 -972 -612 -1359 -412 -480 -967 -779 -1625 -878 -121 -18 -549 -18 -670 0 -494 74 -918 255 -1283 548 -523 419 -850 998 -954 1689 -18 121 -18 549 0 670 104 691 431 1270 954 1689 365 293 828 490 1283 545 50 6 104 13 120 15 72 10 495 -3 588 -18z"/></g>
                    </svg>
                    <a href="../index.xhtml">Pretty Diff</a>
                    - A Diff Algorithm</h1>
                <p id="dcolorScheme">
                    <label class="label" for="colorScheme">Color Scheme</label>
                    <select id="colorScheme">
                        <option>Canvas</option>
                        <option>Shadow</option>
                        <option selected="selected">White</option>
                    </select>
                </p>
                <p>Explore some
                    <a href="../samples.xhtml">samples</a>
                    or browse
                    <a href="https://github.com/prettydiff/prettydiff">Pretty Diff on GitHub</a>.</p>
            </section>
            <section id="page" role="main">
                <div>
                    <h2>Understanding how to compare</h2>
                    <div class="segment">
                        <h3>It is more about the equality than the differences</h3>
                        <p>A good diff algorithm will attempt to identify as much equality as possible.  Everything else qualifies as differences.  The metric for quality and precision is a smaller count of captured differences.  The smaller this number the better, presuming differences aren't escaping undetected.</p>
                        <p>False negatives, which is allowing differences through without detection, is really bad.  This is absolute failure in a diff algorithm.  False positives, which is identifying more differences than there actually are is also bad, but a false positive is much better than a false negative.  This means it is safer to report more differences than are actually present, which is why a higher number of reported differences is less precise.  Maximum precision is reporting differences without any false negatives or false positives.</p>
                        <p>One way to achieve higher precision is to first capture as much equality as possible.  For everything else that is left over prioritize unique items first and report these items as differences.  Finally determine the next bit of equality or uniqueness and everything in between is either a change, an insertion, or a deletion.</p>
                    </div>
                    <div class="segment">
                        <h3>Algorithm quality</h3>
                        <p>The primary priorities when writing this kind of code are execution speed, precision (as previous described), and code simplicity.  In most cases precision is the most important factor in code design, but in some cases speed is more important when processing large input or a batch of thousands of files.  Simplicity is necessary so that other people can understand the code and modify it as necessary to improve upon the design and additional features.  No algorithm is ever capable of meeting all needs for all use cases, so it is important that other people can understand the code with minimal effort.</p>
                    </div>
                    <div class="segment">
                        <h3>Speed</h3>
                        <p>Faster execution is the result of a couple of things.  The most important consideration for making an algorithm faster is to reduce the number of passes through data where possible.  After that eliminate all costly operations.  In most programming languages simple arithmetic and static string comparisons are cheap to execute particularly if the examined strings aren't changing.  The theoretical minimum number of data passes is two as you have to read the contents of each submitted sample.  Pretty Diff achieves speed in its algorithm by only 3 complete passes through data and taking all possible effort to never repeat a step or loop iteration.  The Pretty Diff approach is linear and predictable where the number of interations passing through data is computed as: number of iterations from the first sample + number of iterations from the second sample + the number of iterations from the smallest of those samples.  Performance of the mentioned approach is heavily based upon key access in a hash map, which will likely vary by programming language.</p>
                        <p>The theoretical minimum number of data passes is two as you have to read the contents of each submitted sample.  Until we discover a way to perform a comparison without reading from the samples we can safely assume 2 data passes is the fastest possible approach.  Between that and the Pretty Diff approach there are two possibilities for increased performance.  The first possibility is to make decisions and write output immediately upon reading from the second sample so as to have only two data passes.  The challenge with this approach is that analysis occurs in the moment of the current loop interation without knowledge of what comes later in the second sample.  A more practical second performance possibility is to write a smaller hash map.  Writing a smaller hash map means moving some of the decision tree up front before a separate formal analysis phase.  In order for this approach to be viable this early step in logic must be tiny, non-replicating, and a different means of iteration must be devised to account for a data store of unpredictable size.</p>
                        <p>This page blew up on <a href="https://news.ycombinator.com/item?id=13983085">Hacker News</a> recently and many comments suggested this approach could not possibly be faster than the <a href="https://neil.fraser.name/software/diff_match_patch/myers.pdf">Myers' O(ND)</a> approach.  That may or may not be true and no evidence was provided either way (conjecture is not evidence).</p>
                        <p>In terms of experimental criteria algorithms are themselves largely irrelevant.  More important is the implementation of those algorithms.  If exercising the Myers' approach makes fewer decisions and has fewer <strong style="color:#c00">total</strong> data passes, as described in the previous paragraph, then it likely is faster.  I am calling out the word <strong style="color:#c00">total</strong> because this makes all the difference.  Many of the diff applications I looked at don't provide a complete third data pass.  Instead they provide the minimum two complete data passes over the samples and various smaller passes as calculated by block moves and edit distances.  If these various fractional passes are non-linear, which means starting and stopping in different places respectively, their performance is less predictable.  If these fractional passes are non-linear and touch any given data index more than once they have repetitive logic, and likely are not as fast.  To affirmatively guarantee superior performance over the Pretty Diff approach there needs to be fewer passes over data, which means no repetition and a smaller number of iterations.  Preditability ensures the performance of an application scales roughtly proportionately to the size of the provided samples, where an unpredictable approach would scale disproportionately (slower over time).  I say roughtly because things in physical reality always mess this up like: solar flares, memory block limitations, CPU heat, and so forth.</p>
                        <p>I believe the approach taken here is fast.  I honestly cannot say, scientifically, it is the fastest ever (or slowest) approach for its level of accuracy without also writing alternate algorithms into applications with identical application constraints.  <em>Neither can anyone else.</em>  I can safely say this approach is the fastest ever comparative algorithm for its level of predictability and precision.</p>
                    </div>
                    <div class="segment">
                        <h3>Output format</h3>
                        <p>The Pretty Diff algorithm inherits its output format from the application <a href="https://github.com/cemerick/jsdifflib">jsdifflib</a>.  The output is a big array containing child arrays at each index.  The child arrays each contain 5 indexes in the format: type, start in first sample, end in first sample, start in second sample, end in second sample.  There are 4 types defined in the output: "equal", "replace", "insert", "delete".  The "equal" type means both array index items are identical at the indexes compared.  The "replace" type means that changes are present in the indexes compared.  The "insert" type means the index of the second sample is unique to the second sample.  The "delete" type means the index of the first sample is unique to the first sample.</p>
                    </div>
                </div>
                <div>
                    <h2>How the algorithm works at a high level</h2>
                    <div class="segment">
                        <h3>Getting by with a hash map and some counts</h3>
                        <p>The Pretty Diff algorithm takes after the Paul Heckel algorithm.  First thing is to transform the string input into arrays.  The most primative way to do this is to split the input by lines where each line of input is an index in an arry.  Once the two input samples are converted to arrays they will each have to be examined.</p>
                        <p>The first loop will walk through an array representing one of the code samples and make a decision for a hash map which I call <em>table</em> in the code.  I simply named the two arrays <em>one</em> and <em>two</em>.  Each index of the array, by default a line of code, will serve as a key in the hash map named <em>table</em>.  If this key does not exist then we will add it.  The value for each key is an object with two properites named <em>one</em> and <em>two</em>.  These properties are simply a count indicating the number of times the key is encountered in the two arrays.  If the key is already present then we will simply increase the value of properties <em>one</em> or <em>two</em> respective of the current array.</p>
                        <p>Here is an example of this step in code:</p>
<div class='beautify' data-prettydiff-ignore='true'><ol class='count'><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li></ol><ol class='data'><li>do {<em>&#xA;</em></li><li class='l0'>    if (table[two[b]] === undefined) {<em>&#xA;</em></li><li class='l0'>        table[two[b]] = {<em>&#xA;</em></li><li class='l0'>            one: 0,<em>&#xA;</em></li><li class='l0'>            two: 1<em>&#xA;</em></li><li class='l0'>        };<em>&#xA;</em></li><li class='l0'>    } else {<em>&#xA;</em></li><li class='l0'>        table[two[b]].two += 1;<em>&#xA;</em></li><li class='l0'>    }<em>&#xA;</em></li><li class='l0'>    b += 1;<em>&#xA;</em></li><li class='l0'>} while (b &lt; lenb);<em>&#xA;</em></li></ol></div>
                    </div>
                    <div class="segment">
                        <h3>The third and final pass through the data</h3>
                        <p>Once the table is fully populated with all indexes from both arrays <em>one</em> and <em>two</em> we need a third and final loop to walk across the data and make some simple decisions.  Here is this complete step in code.</p>
<div class='beautify' data-prettydiff-ignore='true'><ol class='count'><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li><li>22</li><li>23</li><li>24</li><li>25</li></ol><ol class='data'><li>do {<em>&#xA;</em></li><li class='l0'>    c = a;<em>&#xA;</em></li><li class='l0'>    d = b;<em>&#xA;</em></li><li class='l0'>    if (one[a] === two[b]) {<em>&#xA;</em></li><li class='l0'>        equality();<em>&#xA;</em></li><li class='l0'>    } else if (table[one[a]][1] &lt; 1 &amp;&amp; table[two[b]][0] &lt; 1) {<em>&#xA;</em></li><li class='l0'>        replaceUniques();<em>&#xA;</em></li><li class='l0'>    } else if (table[one[a]][1] &lt; 1 &amp;&amp; one[a + 1] !== two[b + 2]) {<em>&#xA;</em></li><li class='l0'>        deletion();<em>&#xA;</em></li><li class='l0'>    } else if (table[two[b]][0] &lt; 1 &amp;&amp; one[a + 2] !== two[b + 1]) {<em>&#xA;</em></li><li class='l0'>        insertion();<em>&#xA;</em></li><li class='l0'>    } else if (table[one[a]][0] - table[one[a]][1] === 1 &amp;&amp; one[a + 1] !== two[b + 2]) {<em>&#xA;</em></li><li class='l0'>        deletionStatic();<em>&#xA;</em></li><li class='l0'>    } else if (table[two[b]][1] - table[two[b]][0] === 1 &amp;&amp; one[a + 2] !== two[b + 1]) {<em>&#xA;</em></li><li class='l0'>        insertionStatic();<em>&#xA;</em></li><li class='l0'>    } else if (one[a + 1] === two[b]) {<em>&#xA;</em></li><li class='l0'>        deletion();<em>&#xA;</em></li><li class='l0'>    } else if (one[a] === two[b + 1]) {<em>&#xA;</em></li><li class='l0'>        insertion();<em>&#xA;</em></li><li class='l0'>    } else {<em>&#xA;</em></li><li class='l0'>        replacement();<em>&#xA;</em></li><li class='l0'>    }<em>&#xA;</em></li><li class='l0'>    a = a + 1;<em>&#xA;</em></li><li class='l0'>    b = b + 1;<em>&#xA;</em></li><li class='l0'>} while (a &lt; lena &amp;&amp; b &lt; lenb);<em>&#xA;</em></li></ol></div>
                        <p>Before I go any further I want to be clear this logic is fast and simple, but it isn't precise at all.  We will fix this later with a child function named <em>fix</em>.  I chose to make corrections for precision as a secondary step so as to not disrupt performance and isolate complexity into a separate single location.</p>
                        <p>In this code references <em>a</em> and <em>b</em> are simply positive integer incrementors.  The <em>a</em> reference is always associated with the <em>one</em> array while the <em>b</em> reference is always associated with the <em>two</em> array.  This is necessary so that each array may increment independently without collision.  The <em>c</em> and <em>d</em> references are secondary incrementors used as closures in the child functions.  These secondary incrementors allow for child loops to occur without mutation to the primary incrementors.</p>
                        <p>The <strong>first</strong> thing that happens in this loop is an attempt to discover equality.  Everything else is less important and so happens later in the decision tree.</p>
                        <p>The <strong>second</strong> rule is to identify items that occur only one more time in each array.  If the next item to occur in the arrays is not equal but occurs just once more then we know the item is a unique change.</p>
                        <p>The <strong>third</strong> rule is to determine if the current item is a deletion.  If the current item, and possibly additional following items, is present in the first sample but no longer exists in the second sample then it is a dynamic deletion.</p>
                        <p>The <strong>fourth</strong> rule is the same as the third rule but in reverse to determine dynamic insertions.</p>
                        <p>The <strong>fifth</strong> rule is to determine if the current occurs exactly one more time in the first sample than in the second sample and yet is not a match for the next item in the first sample with two items up in the second sample.  This is a static deletion, or rather a deletion of a fixed number of items.</p>
                        <p>The <strong>sixth</strong> rule is the same as the fifth rule but in reverse to determine static insertions.</p>
                        <p>The <strong>seventh</strong> and final rule determines that the current items in the samples are non-unique changes.</p>
                        <p>The child functions are as follows:</p>
<div class='beautify' data-prettydiff-ignore='true'><ol class='count'><li class='fold' title='folds from line 1 to line 11'>- 1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li class='fold' title='folds from line 12 to line 20'>- 12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li class='fold' title='folds from line 21 to line 30'>- 21</li><li>22</li><li>23</li><li>24</li><li>25</li><li>26</li><li>27</li><li>28</li><li>29</li><li>30</li><li class='fold' title='folds from line 31 to line 39'>- 31</li><li>32</li><li>33</li><li>34</li><li>35</li><li>36</li><li>37</li><li>38</li><li>39</li><li class='fold' title='folds from line 40 to line 47'>- 40</li><li>41</li><li>42</li><li>43</li><li>44</li><li>45</li><li>46</li><li>47</li><li class='fold' title='folds from line 48 to line 58'>- 48</li><li>49</li><li>50</li><li>51</li><li>52</li><li>53</li><li>54</li><li>55</li><li>56</li><li>57</li><li>58</li><li class='fold' title='folds from line 59 to line 68'>- 59</li><li>60</li><li>61</li><li>62</li><li>63</li><li>64</li><li>65</li><li>66</li><li>67</li><li>68</li></ol><ol class='data'><li>equality = function <em class='s1'>diffview__opcodes_equality</em>() <em class='s1'>{</em><em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>do {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    table[one[c]].one -= 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    table[one[c]].two -= 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    c                 += 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    d                 += 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>} while (c &lt; lena &amp;&amp; d &lt; lenb &amp;&amp; one[c] === two[d]);<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>fix(["equal", a, c, b, d]);<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>b = d - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>a = c - 1;<em>&#xA;</em></li><li class='l0'><em class='s1'>}</em>,<em>&#xA;</em></li><li class='l0'>deletion = function <em class='s1'>diffview__opcodes_deletion</em>() <em class='s1'>{</em><em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>do {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    table[one[c]].one -= 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    c                 += 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>} while (c &lt; lena &amp;&amp; table[one[c]].two &lt; 1);<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>fix(["delete", a, c, -1, -1]);<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>a = c - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>b = d - 1;<em>&#xA;</em></li><li class='l0'><em class='s1'>}</em>,<em>&#xA;</em></li><li class='l0'>deletionStatic = function <em class='s1'>diffview__opcodes_deletionStatic</em>() <em class='s1'>{</em><em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>table[one[a]].one -= 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>fix([<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    "delete", a, a + 1,<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    -1,<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    -1<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>]);<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>a = c;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>b = d - 1;<em>&#xA;</em></li><li class='l0'><em class='s1'>}</em>,<em>&#xA;</em></li><li class='l0'>insertion = function <em class='s1'>diffview__opcodes_insertion</em>() <em class='s1'>{</em><em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>do {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    table[two[d]].two -= 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    d                 += 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>} while (d &lt; lenb &amp;&amp; table[two[d]].one &lt; 1);<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>fix(["insert", -1, -1, b, d]);<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>a = c - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>b = d - 1;<em>&#xA;</em></li><li class='l0'><em class='s1'>}</em>,<em>&#xA;</em></li><li class='l0'>insertionStatic = function <em class='s1'>diffview__opcodes_insertionStatic</em>() <em class='s1'>{</em><em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>table[two[b]].two -= 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>fix([<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    "insert", -1, -1, b, b + 1<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>]);<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>a = c - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>b = d;<em>&#xA;</em></li><li class='l0'><em class='s1'>}</em>,<em>&#xA;</em></li><li class='l0'>replacement = function <em class='s1'>diffview__opcodes_replacement</em>() <em class='s1'>{</em><em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>do {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    table[one[c]].one -= 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    table[two[d]].two -= 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    c                 += 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    d                 += 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>} while (c &lt; lena &amp;&amp; d &lt; lenb &amp;&amp; table[one[c]].two &gt; 0 &amp;&amp; table[two[d]].one &gt; 0);<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>fix(["replace", a, c, b, d]);<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>a = c - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>b = d - 1;<em>&#xA;</em></li><li class='l0'><em class='s1'>}</em>,<em>&#xA;</em></li><li class='l0'>replaceUniques = function <em class='s1'>diffview__opcodes_replaceUniques</em>() <em class='s1'>{</em><em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>do {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    table[one[c]].one -= 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    c                 += 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    d                 += 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>} while (c &lt; lena &amp;&amp; d &lt; lenb &amp;&amp; table[one[c]].two &lt; 1 &amp;&amp; table[two[d]].one &lt; 1);<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>fix(["replace", a, c, b, d]);<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>a = c - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>b = d - 1;<em>&#xA;</em></li><li class='l0'><em class='s1'>}</em><em>&#xA;</em></li></ol></div>
                        <p>It must be noted that most of the these child functions do contain their own loops, but these loops are not duplicates.  The primary parent loop, the so called third and final loop, is adjusted forward by the distance these smaller loops increment so that there is no repetition or lose of execution speed.</p>
                    </div>
                    <div class="segment">
                        <h3>The <em>fix</em> function</h3>
                        <p>We can see from the child function code that arrays are generated which appear to be the format described as the child arrays of the output.  Instead of pushing this data to the output array directly instead we are passing it through a function named <em>fix</em> which serves as a sort of quality control filter.  This function checks for things like:</p>
                        <ul>
                            <li>A diff type immediately following the same diff type, which can be combined into a single child array for the output</li>
                            <li>An insertion immediately following a deletion, or vise versa, which should likely be a replacement</li>
                            <li>Whether false positives generated from replacements immediately following an insertion or deletion can be eliminated</li>
                        </ul>
                        <p>The general idea is to only accept a child array of the output as an argument and the make a decision after comparing it against the previous child array of the output.  Aside from two narrow edge cases there is no analysis of the original data.  Think of it like an appeals court in that no new evidence is allowed, because only the laws under scrutiny.</p>
                        <p>The code for the fix function is as follows:</p>
<div class='beautify' data-prettydiff-ignore='true'><ol class='count'><li class='fold' title='folds from line 1 to line 130'>- 1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li><li>22</li><li>23</li><li>24</li><li>25</li><li>26</li><li>27</li><li>28</li><li>29</li><li>30</li><li>31</li><li>32</li><li>33</li><li>34</li><li>35</li><li>36</li><li>37</li><li>38</li><li>39</li><li>40</li><li>41</li><li>42</li><li>43</li><li>44</li><li>45</li><li>46</li><li>47</li><li>48</li><li>49</li><li>50</li><li>51</li><li>52</li><li>53</li><li>54</li><li>55</li><li>56</li><li>57</li><li>58</li><li>59</li><li>60</li><li>61</li><li>62</li><li>63</li><li>64</li><li>65</li><li>66</li><li>67</li><li>68</li><li>69</li><li>70</li><li>71</li><li>72</li><li>73</li><li>74</li><li>75</li><li>76</li><li>77</li><li>78</li><li>79</li><li>80</li><li>81</li><li>82</li><li>83</li><li>84</li><li>85</li><li>86</li><li>87</li><li>88</li><li>89</li><li>90</li><li>91</li><li>92</li><li>93</li><li>94</li><li>95</li><li>96</li><li>97</li><li>98</li><li>99</li><li>100</li><li>101</li><li>102</li><li>103</li><li>104</li><li>105</li><li>106</li><li>107</li><li>108</li><li>109</li><li>110</li><li>111</li><li>112</li><li>113</li><li>114</li><li>115</li><li>116</li><li>117</li><li>118</li><li>119</li><li>120</li><li>121</li><li>122</li><li>123</li><li>124</li><li>125</li><li>126</li><li>127</li><li>128</li><li>129</li><li>130</li></ol><ol class='data'><li>fix = function <em class='s1'>diffview__opcodes_fix</em>(<em class='s1'>code</em>) <em class='s1'>{</em><em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>var <em class='s1'>prior</em> = codes[codes.length - 1];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>if (<em class='s1'>prior</em> !== undefined) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    if (<em class='s1'>prior</em>[0] === <em class='s1'>code</em>[0]) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        if (<em class='s1'>code</em>[0] === "replace" || <em class='s1'>code</em>[0] === "equal") {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            <em class='s1'>prior</em>[2] = <em class='s1'>code</em>[2];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            <em class='s1'>prior</em>[4] = <em class='s1'>code</em>[4];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        } else if (<em class='s1'>code</em>[0] === "delete") {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            <em class='s1'>prior</em>[2] = <em class='s1'>code</em>[2];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        } else if (<em class='s1'>code</em>[0] === "insert") {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            <em class='s1'>prior</em>[4] = <em class='s1'>code</em>[4];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        return;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    if (<em class='s1'>prior</em>[0] === "insert" &amp;&amp; <em class='s1'>prior</em>[4] - <em class='s1'>prior</em>[3] === 1) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        if (<em class='s1'>code</em>[2] - <em class='s1'>code</em>[1] === 1) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            if (<em class='s1'>code</em>[0] === "replace") {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                <em class='s1'>prior</em>[0] = "replace";<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                <em class='s1'>prior</em>[1] = <em class='s1'>code</em>[1];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                <em class='s1'>prior</em>[2] = <em class='s1'>code</em>[2];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                <em class='s1'>code</em>[0]  = "insert";<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                <em class='s1'>code</em>[1]  = -1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                <em class='s1'>code</em>[2]  = -1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            } else if (<em class='s1'>code</em>[0] === "delete") {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                <em class='s1'>code</em>[0] = "replace";<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                <em class='s1'>code</em>[3] = <em class='s1'>prior</em>[3];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                <em class='s1'>code</em>[4] = <em class='s1'>prior</em>[4];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                codes.pop();<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                <em class='s1'>prior</em> = codes[codes.length - 1];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                if (<em class='s1'>prior</em>[0] === "replace") {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                    <em class='s1'>prior</em>[2] = <em class='s1'>code</em>[2];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                    <em class='s1'>prior</em>[4] = <em class='s1'>code</em>[4];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                    return;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        } else if (<em class='s1'>code</em>[0] === "delete") {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            <em class='s1'>prior</em>[0] = "replace";<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            <em class='s1'>prior</em>[1] = <em class='s1'>code</em>[1];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            <em class='s1'>prior</em>[2] = <em class='s1'>code</em>[1] + 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            <em class='s1'>code</em>[1]  = <em class='s1'>code</em>[1] + 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        } else if (<em class='s1'>code</em>[0] === "replace") {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            <em class='s1'>prior</em>[0] = "replace";<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            <em class='s1'>prior</em>[1] = <em class='s1'>code</em>[1];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            <em class='s1'>prior</em>[2] = <em class='s1'>code</em>[1] + 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            c        = <em class='s1'>prior</em>[2];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            d        = <em class='s1'>prior</em>[4];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            return;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    } else if (<em class='s1'>prior</em>[0] === "insert" &amp;&amp; <em class='s1'>code</em>[0] === "delete" &amp;&amp; <em class='s1'>code</em>[2] - <em class='s1'>code</em>[1] === 1) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>prior</em>[4] = <em class='s1'>prior</em>[4] - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>code</em>[0]  = "replace";<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>code</em>[3]  = <em class='s1'>prior</em>[4];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>code</em>[4]  = <em class='s1'>prior</em>[4] + 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    } else if (<em class='s1'>prior</em>[0] === "delete" &amp;&amp; <em class='s1'>prior</em>[2] - <em class='s1'>prior</em>[1] === 1) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        if (<em class='s1'>code</em>[4] - <em class='s1'>code</em>[3] === 1) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            if (<em class='s1'>code</em>[0] === "replace") {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                <em class='s1'>prior</em>[0] = "replace";<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                <em class='s1'>prior</em>[3] = <em class='s1'>code</em>[3];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                <em class='s1'>prior</em>[4] = <em class='s1'>code</em>[4];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                <em class='s1'>code</em>[0]  = "delete";<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                <em class='s1'>code</em>[3]  = -1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                <em class='s1'>code</em>[4]  = -1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            } else if (<em class='s1'>code</em>[0] === "insert") {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                <em class='s1'>code</em>[0] = "replace";<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                <em class='s1'>code</em>[1] = <em class='s1'>prior</em>[1];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                <em class='s1'>code</em>[2] = <em class='s1'>prior</em>[2];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                codes.pop();<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                <em class='s1'>prior</em> = codes[codes.length - 1];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                if (<em class='s1'>prior</em>[0] === "replace") {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                    <em class='s1'>prior</em>[2] = <em class='s1'>code</em>[2];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                    <em class='s1'>prior</em>[4] = <em class='s1'>code</em>[4];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                    return;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        } else if (<em class='s1'>code</em>[0] === "insert") {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            <em class='s1'>prior</em>[0] = "replace";<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            <em class='s1'>prior</em>[3] = <em class='s1'>code</em>[3];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            <em class='s1'>prior</em>[4] = <em class='s1'>code</em>[3] + 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            <em class='s1'>code</em>[3]  = <em class='s1'>code</em>[3] + 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        } else if (<em class='s1'>code</em>[0] === "replace") {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            <em class='s1'>prior</em>[0] = "replace";<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            <em class='s1'>prior</em>[3] = <em class='s1'>code</em>[3];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            <em class='s1'>prior</em>[4] = <em class='s1'>code</em>[4] + 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            c        = <em class='s1'>prior</em>[2];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            d        = <em class='s1'>prior</em>[4];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            return;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    } else if (<em class='s1'>prior</em>[0] === "delete" &amp;&amp; <em class='s1'>code</em>[0] === "insert" &amp;&amp; <em class='s1'>code</em>[4] - <em class='s1'>code</em>[3] === 1) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>prior</em>[2] = <em class='s1'>prior</em>[2] - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>code</em>[0]  = "replace";<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>code</em>[1]  = <em class='s1'>prior</em>[2];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>code</em>[2]  = <em class='s1'>prior</em>[2] + 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    } else if (<em class='s1'>prior</em>[0] === "replace") {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        if (<em class='s1'>code</em>[0] === "delete") {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            if (one[<em class='s1'>code</em>[2] - 1] === two[<em class='s1'>prior</em>[4] - 1]) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                if (<em class='s1'>prior</em>[2] - <em class='s1'>prior</em>[1] &gt; 1) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                    <em class='s1'>prior</em>[4] = <em class='s1'>prior</em>[4] - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                c = c - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                d = d - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                return;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            if (one[<em class='s1'>code</em>[2]] === two[<em class='s1'>prior</em>[4] - 1]) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                if (<em class='s1'>prior</em>[2] - <em class='s1'>prior</em>[1] &gt; 1) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                    <em class='s1'>prior</em>[2]             = <em class='s1'>prior</em>[2] - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                    <em class='s1'>prior</em>[4]             = <em class='s1'>prior</em>[4] - 11;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                    table[one[c - 1]][0] = table[one[c - 1]][0] - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        } else if (<em class='s1'>code</em>[0] === "insert") {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            if (one[<em class='s1'>prior</em>[2] - 1] === two[<em class='s1'>code</em>[4] - 1]) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                if (<em class='s1'>prior</em>[2] - <em class='s1'>prior</em>[1] &gt; 1) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                    <em class='s1'>prior</em>[2] = <em class='s1'>prior</em>[2] - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                c = c - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                d = d - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                return;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            if (one[<em class='s1'>code</em>[2] - 1] === two[<em class='s1'>prior</em>[4]]) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                if (<em class='s1'>prior</em>[4] - <em class='s1'>prior</em>[3] &gt; 1) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                    <em class='s1'>prior</em>[2]             = <em class='s1'>prior</em>[2] - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                    <em class='s1'>prior</em>[4]             = <em class='s1'>prior</em>[4] - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                    table[two[d - 1]][1] = table[two[d - 1]][1] - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>                }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>            }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>}<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>codes.push(<em class='s1'>code</em>);<em>&#xA;</em></li><li class='l0'><em class='s1'>}</em>;<em>&#xA;</em></li></ol></div>
                    </div>
                    <div class="segment">
                        <h3>Done!</h3>
                        <p>That is the entire diff algorithm.  Comments, feedback, and <a href="https://github.com/prettydiff/prettydiff">pull requests</a> are welcome.  Here is the complete function used in the Pretty Diff application:</p>
<div class='beautify' data-prettydiff-ignore='true'><ol class='count'><li class='fold' title='folds from line 1 to line 297'>- 1</li><li>2</li><li class='fold' title='folds from line 3 to line 7'>- 3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li><li class='fold' title='folds from line 22 to line 150'>- 22</li><li>23</li><li>24</li><li>25</li><li>26</li><li>27</li><li>28</li><li>29</li><li>30</li><li>31</li><li>32</li><li>33</li><li>34</li><li>35</li><li>36</li><li>37</li><li>38</li><li>39</li><li>40</li><li>41</li><li>42</li><li>43</li><li>44</li><li>45</li><li>46</li><li>47</li><li>48</li><li>49</li><li>50</li><li>51</li><li>52</li><li>53</li><li>54</li><li>55</li><li>56</li><li>57</li><li>58</li><li>59</li><li>60</li><li>61</li><li>62</li><li>63</li><li>64</li><li>65</li><li>66</li><li>67</li><li>68</li><li>69</li><li>70</li><li>71</li><li>72</li><li>73</li><li>74</li><li>75</li><li>76</li><li>77</li><li>78</li><li>79</li><li>80</li><li>81</li><li>82</li><li>83</li><li>84</li><li>85</li><li>86</li><li>87</li><li>88</li><li>89</li><li>90</li><li>91</li><li>92</li><li>93</li><li>94</li><li>95</li><li>96</li><li>97</li><li>98</li><li>99</li><li>100</li><li>101</li><li>102</li><li>103</li><li>104</li><li>105</li><li>106</li><li>107</li><li>108</li><li>109</li><li>110</li><li>111</li><li>112</li><li>113</li><li>114</li><li>115</li><li>116</li><li>117</li><li>118</li><li>119</li><li>120</li><li>121</li><li>122</li><li>123</li><li>124</li><li>125</li><li>126</li><li>127</li><li>128</li><li>129</li><li>130</li><li>131</li><li>132</li><li>133</li><li>134</li><li>135</li><li>136</li><li>137</li><li>138</li><li>139</li><li>140</li><li>141</li><li>142</li><li>143</li><li>144</li><li>145</li><li>146</li><li>147</li><li>148</li><li>149</li><li>150</li><li>151</li><li class='fold' title='folds from line 152 to line 161'>- 152</li><li>153</li><li>154</li><li>155</li><li>156</li><li>157</li><li>158</li><li>159</li><li>160</li><li>161</li><li>162</li><li class='fold' title='folds from line 163 to line 170'>- 163</li><li>164</li><li>165</li><li>166</li><li>167</li><li>168</li><li>169</li><li>170</li><li>171</li><li class='fold' title='folds from line 172 to line 180'>- 172</li><li>173</li><li>174</li><li>175</li><li>176</li><li>177</li><li>178</li><li>179</li><li>180</li><li>181</li><li class='fold' title='folds from line 182 to line 189'>- 182</li><li>183</li><li>184</li><li>185</li><li>186</li><li>187</li><li>188</li><li>189</li><li>190</li><li class='fold' title='folds from line 191 to line 197'>- 191</li><li>192</li><li>193</li><li>194</li><li>195</li><li>196</li><li>197</li><li>198</li><li class='fold' title='folds from line 199 to line 208'>- 199</li><li>200</li><li>201</li><li>202</li><li>203</li><li>204</li><li>205</li><li>206</li><li>207</li><li>208</li><li>209</li><li class='fold' title='folds from line 210 to line 218'>- 210</li><li>211</li><li>212</li><li>213</li><li>214</li><li>215</li><li>216</li><li>217</li><li>218</li><li>219</li><li>220</li><li class='fold' title='folds from line 221 to line 223'>- 221</li><li>222</li><li>223</li><li>224</li><li>225</li><li>226</li><li>227</li><li>228</li><li>229</li><li>230</li><li>231</li><li>232</li><li>233</li><li>234</li><li>235</li><li class='fold' title='folds from line 236 to line 238'>- 236</li><li>237</li><li>238</li><li>239</li><li>240</li><li>241</li><li>242</li><li>243</li><li>244</li><li>245</li><li>246</li><li>247</li><li>248</li><li>249</li><li>250</li><li>251</li><li>252</li><li>253</li><li class='fold' title='folds from line 254 to line 258'>- 254</li><li>255</li><li>256</li><li>257</li><li>258</li><li>259</li><li>260</li><li>261</li><li>262</li><li>263</li><li>264</li><li>265</li><li>266</li><li>267</li><li>268</li><li>269</li><li>270</li><li>271</li><li>272</li><li>273</li><li>274</li><li>275</li><li>276</li><li>277</li><li>278</li><li>279</li><li>280</li><li>281</li><li>282</li><li>283</li><li>284</li><li>285</li><li>286</li><li>287</li><li>288</li><li>289</li><li>290</li><li>291</li><li>292</li><li>293</li><li>294</li><li>295</li><li>296</li><li>297</li><li>298</li><li>299</li></ol><ol class='data'><li>function <em class='s1'>diffview__opcodes</em>() <em class='s1'>{</em><em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>var <em class='s1'>table</em>           = {},<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>lines</em>           = <em class='s1'>function</em> <em class='s2'>diff_opcodes_lines</em>(<em class='s2'>str</em>) <em class='s2'>{</em><em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s2'>str</em> = <em class='s2'>str</em><em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        .replace(/\r\n/g, "\n")<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        .replace(/\r/g, "\n");<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    return <em class='s2'>str</em>.split("\n");<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em><em class='l1'>    </em><em class='s2'>}</em>,<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>one</em>             = (typeof options.source === "string")<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        ? <em class='s1'>lines</em>(options.source)<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        : options.source,<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>two</em>             = (typeof options.diff === "string")<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        ? <em class='s1'>lines</em>(options.diff)<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        : options.diff,<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>lena</em>            = <em class='s1'>one</em>.length,<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>lenb</em>            = <em class='s1'>two</em>.length,<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>a</em>               = 0,<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>b</em>               = 0,<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>c</em>               = 0,<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>d</em>               = 0,<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>codes</em>           = [],<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>fix</em>             = <em class='s1'>function</em> <em class='s2'>diffview__opcodes_fix</em>(<em class='s2'>code</em>) <em class='s2'>{</em><em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    var <em class='s2'>prior</em> = <em class='s1'>codes</em>[<em class='s1'>codes</em>.length - 1];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    if (<em class='s2'>prior</em> !== undefined) {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        if (<em class='s2'>prior</em>[0] === <em class='s2'>code</em>[0]) {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            if (<em class='s2'>code</em>[0] === "replace" || <em class='s2'>code</em>[0] === "equal") {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                <em class='s2'>prior</em>[2] = <em class='s2'>code</em>[2];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                <em class='s2'>prior</em>[4] = <em class='s2'>code</em>[4];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            } else if (<em class='s2'>code</em>[0] === "delete") {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                <em class='s2'>prior</em>[2] = <em class='s2'>code</em>[2];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            } else if (<em class='s2'>code</em>[0] === "insert") {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                <em class='s2'>prior</em>[4] = <em class='s2'>code</em>[4];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            }<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            return;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        }<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        if (<em class='s2'>prior</em>[0] === "insert" &amp;&amp; <em class='s2'>prior</em>[4] - <em class='s2'>prior</em>[3] === 1) {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            if (<em class='s2'>code</em>[2] - <em class='s2'>code</em>[1] === 1) {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                if (<em class='s2'>code</em>[0] === "replace") {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s2'>prior</em>[0] = "replace";<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s2'>prior</em>[1] = <em class='s2'>code</em>[1];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s2'>prior</em>[2] = <em class='s2'>code</em>[2];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s2'>code</em>[0]  = "insert";<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s2'>code</em>[1]  = -1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s2'>code</em>[2]  = -1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                } else if (<em class='s2'>code</em>[0] === "delete") {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s2'>code</em>[0] = "replace";<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s2'>code</em>[3] = <em class='s2'>prior</em>[3];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s2'>code</em>[4] = <em class='s2'>prior</em>[4];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s1'>codes</em>.pop();<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s2'>prior</em> = <em class='s1'>codes</em>[<em class='s1'>codes</em>.length - 1];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    if (<em class='s2'>prior</em>[0] === "replace") {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                        <em class='s2'>prior</em>[2] = <em class='s2'>code</em>[2];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                        <em class='s2'>prior</em>[4] = <em class='s2'>code</em>[4];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                        return;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    }<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                }<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            } else if (<em class='s2'>code</em>[0] === "delete") {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                <em class='s2'>prior</em>[0] = "replace";<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                <em class='s2'>prior</em>[1] = <em class='s2'>code</em>[1];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                <em class='s2'>prior</em>[2] = <em class='s2'>code</em>[1] + 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                <em class='s2'>code</em>[1]  = <em class='s2'>code</em>[1] + 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            } else if (<em class='s2'>code</em>[0] === "replace") {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                <em class='s2'>prior</em>[0] = "replace";<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                <em class='s2'>prior</em>[1] = <em class='s2'>code</em>[1];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                <em class='s2'>prior</em>[2] = <em class='s2'>code</em>[1] + 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                <em class='s1'>c</em>        = <em class='s2'>prior</em>[2];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                <em class='s1'>d</em>        = <em class='s2'>prior</em>[4];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                return;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            }<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        } else if (<em class='s2'>prior</em>[0] === "insert" &amp;&amp; <em class='s2'>code</em>[0] === "delete" &amp;&amp; <em class='s2'>code</em>[2] - <em class='s2'>code</em>[1] === 1) {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            <em class='s2'>prior</em>[4] = <em class='s2'>prior</em>[4] - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            <em class='s2'>code</em>[0]  = "replace";<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            <em class='s2'>code</em>[3]  = <em class='s2'>prior</em>[4];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            <em class='s2'>code</em>[4]  = <em class='s2'>prior</em>[4] + 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        } else if (<em class='s2'>prior</em>[0] === "delete" &amp;&amp; <em class='s2'>prior</em>[2] - <em class='s2'>prior</em>[1] === 1) {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            if (<em class='s2'>code</em>[4] - <em class='s2'>code</em>[3] === 1) {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                if (<em class='s2'>code</em>[0] === "replace") {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s2'>prior</em>[0] = "replace";<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s2'>prior</em>[3] = <em class='s2'>code</em>[3];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s2'>prior</em>[4] = <em class='s2'>code</em>[4];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s2'>code</em>[0]  = "delete";<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s2'>code</em>[3]  = -1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s2'>code</em>[4]  = -1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                } else if (<em class='s2'>code</em>[0] === "insert") {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s2'>code</em>[0] = "replace";<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s2'>code</em>[1] = <em class='s2'>prior</em>[1];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s2'>code</em>[2] = <em class='s2'>prior</em>[2];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s1'>codes</em>.pop();<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s2'>prior</em> = <em class='s1'>codes</em>[<em class='s1'>codes</em>.length - 1];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    if (<em class='s2'>prior</em>[0] === "replace") {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                        <em class='s2'>prior</em>[2] = <em class='s2'>code</em>[2];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                        <em class='s2'>prior</em>[4] = <em class='s2'>code</em>[4];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                        return;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    }<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                }<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            } else if (<em class='s2'>code</em>[0] === "insert") {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                <em class='s2'>prior</em>[0] = "replace";<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                <em class='s2'>prior</em>[3] = <em class='s2'>code</em>[3];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                <em class='s2'>prior</em>[4] = <em class='s2'>code</em>[3] + 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                <em class='s2'>code</em>[3]  = <em class='s2'>code</em>[3] + 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            } else if (<em class='s2'>code</em>[0] === "replace") {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                <em class='s2'>prior</em>[0] = "replace";<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                <em class='s2'>prior</em>[3] = <em class='s2'>code</em>[3];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                <em class='s2'>prior</em>[4] = <em class='s2'>code</em>[4] + 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                <em class='s1'>c</em>        = <em class='s2'>prior</em>[2];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                <em class='s1'>d</em>        = <em class='s2'>prior</em>[4];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                return;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            }<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        } else if (<em class='s2'>prior</em>[0] === "delete" &amp;&amp; <em class='s2'>code</em>[0] === "insert" &amp;&amp; <em class='s2'>code</em>[4] - <em class='s2'>code</em>[3] === 1) {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            <em class='s2'>prior</em>[2] = <em class='s2'>prior</em>[2] - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            <em class='s2'>code</em>[0]  = "replace";<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            <em class='s2'>code</em>[1]  = <em class='s2'>prior</em>[2];<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            <em class='s2'>code</em>[2]  = <em class='s2'>prior</em>[2] + 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        } else if (<em class='s2'>prior</em>[0] === "replace") {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            if (<em class='s2'>code</em>[0] === "delete") {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                if (<em class='s1'>one</em>[<em class='s2'>code</em>[2] - 1] === <em class='s1'>two</em>[<em class='s2'>prior</em>[4] - 1]) {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    if (<em class='s2'>prior</em>[2] - <em class='s2'>prior</em>[1] &gt; 1) {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                        <em class='s2'>prior</em>[4] = <em class='s2'>prior</em>[4] - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    }<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s1'>c</em> = <em class='s1'>c</em> - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s1'>d</em> = <em class='s1'>d</em> - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    return;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                }<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                if (<em class='s1'>one</em>[<em class='s2'>code</em>[2]] === <em class='s1'>two</em>[<em class='s2'>prior</em>[4] - 1]) {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    if (<em class='s2'>prior</em>[2] - <em class='s2'>prior</em>[1] &gt; 1) {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                        <em class='s2'>prior</em>[2]             = <em class='s2'>prior</em>[2] - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                        <em class='s2'>prior</em>[4]             = <em class='s2'>prior</em>[4] - 11;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                        <em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>c</em> - 1]][0] = <em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>c</em> - 1]][0] - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    }<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                }<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            } else if (<em class='s2'>code</em>[0] === "insert") {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                if (<em class='s1'>one</em>[<em class='s2'>prior</em>[2] - 1] === <em class='s1'>two</em>[<em class='s2'>code</em>[4] - 1]) {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    if (<em class='s2'>prior</em>[2] - <em class='s2'>prior</em>[1] &gt; 1) {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                        <em class='s2'>prior</em>[2] = <em class='s2'>prior</em>[2] - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    }<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s1'>c</em> = <em class='s1'>c</em> - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    <em class='s1'>d</em> = <em class='s1'>d</em> - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    return;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                }<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                if (<em class='s1'>one</em>[<em class='s2'>code</em>[2] - 1] === <em class='s1'>two</em>[<em class='s2'>prior</em>[4]]) {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    if (<em class='s2'>prior</em>[4] - <em class='s2'>prior</em>[3] &gt; 1) {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                        <em class='s2'>prior</em>[2]             = <em class='s2'>prior</em>[2] - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                        <em class='s2'>prior</em>[4]             = <em class='s2'>prior</em>[4] - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                        <em class='s1'>table</em>[<em class='s1'>two</em>[<em class='s1'>d</em> - 1]][1] = <em class='s1'>table</em>[<em class='s1'>two</em>[<em class='s1'>d</em> - 1]][1] - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                    }<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>                }<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>            }<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        }<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    }<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>codes</em>.push(<em class='s2'>code</em>);<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em><em class='l1'>    </em><em class='s2'>}</em>,<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>equality</em>        = <em class='s1'>function</em> <em class='s2'>diffview__opcodes_equality</em>() <em class='s2'>{</em><em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    do {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        <em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>c</em>]][0] = <em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>c</em>]][0] - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        <em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>c</em>]][1] = <em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>c</em>]][1] - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        <em class='s1'>c</em>                = <em class='s1'>c</em> + 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        <em class='s1'>d</em>                = <em class='s1'>d</em> + 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    } while (<em class='s1'>c</em> &lt; <em class='s1'>lena</em> &amp;&amp; <em class='s1'>d</em> &lt; <em class='s1'>lenb</em> &amp;&amp; <em class='s1'>one</em>[<em class='s1'>c</em>] === <em class='s1'>two</em>[<em class='s1'>d</em>]);<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>fix</em>(["equal", <em class='s1'>a</em>, <em class='s1'>c</em>, <em class='s1'>b</em>, <em class='s1'>d</em>]);<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>b</em> = <em class='s1'>d</em> - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>a</em> = <em class='s1'>c</em> - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em><em class='l1'>    </em><em class='s2'>}</em>,<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>deletion</em>        = <em class='s1'>function</em> <em class='s2'>diffview__opcodes_deletion</em>() <em class='s2'>{</em><em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    do {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        <em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>c</em>]][0] = <em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>c</em>]][0] - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        <em class='s1'>c</em>                = <em class='s1'>c</em> + 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    } while (<em class='s1'>c</em> &lt; <em class='s1'>lena</em> &amp;&amp; <em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>c</em>]][1] &lt; 1);<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>fix</em>(["delete", <em class='s1'>a</em>, <em class='s1'>c</em>, -1, -1]);<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>a</em> = <em class='s1'>c</em> - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>b</em> = <em class='s1'>d</em> - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em><em class='l1'>    </em><em class='s2'>}</em>,<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>deletionStatic</em>  = <em class='s1'>function</em> <em class='s2'>diffview__opcodes_deletionStatic</em>() <em class='s2'>{</em><em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>a</em>]][0] = <em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>a</em>]][0] - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>fix</em>([<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        "delete", <em class='s1'>a</em>, <em class='s1'>a</em> + 1,<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        -1,<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        -1<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    ]);<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>a</em> = <em class='s1'>c</em>;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>b</em> = <em class='s1'>d</em> - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em><em class='l1'>    </em><em class='s2'>}</em>,<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>insertion</em>       = <em class='s1'>function</em> <em class='s2'>diffview__opcodes_insertion</em>() <em class='s2'>{</em><em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    do {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        <em class='s1'>table</em>[<em class='s1'>two</em>[<em class='s1'>d</em>]][1] = <em class='s1'>table</em>[<em class='s1'>two</em>[<em class='s1'>d</em>]][1] - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        <em class='s1'>d</em>                = <em class='s1'>d</em> + 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    } while (<em class='s1'>d</em> &lt; <em class='s1'>lenb</em> &amp;&amp; <em class='s1'>table</em>[<em class='s1'>two</em>[<em class='s1'>d</em>]][0] &lt; 1);<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>fix</em>(["insert", -1, -1, <em class='s1'>b</em>, <em class='s1'>d</em>]);<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>a</em> = <em class='s1'>c</em> - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>b</em> = <em class='s1'>d</em> - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em><em class='l1'>    </em><em class='s2'>}</em>,<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>insertionStatic</em> = <em class='s1'>function</em> <em class='s2'>diffview__opcodes_insertionStatic</em>() <em class='s2'>{</em><em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>table</em>[<em class='s1'>two</em>[<em class='s1'>b</em>]][1] = <em class='s1'>table</em>[<em class='s1'>two</em>[<em class='s1'>b</em>]][1] - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>fix</em>([<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        "insert", -1, -1, <em class='s1'>b</em>, <em class='s1'>b</em> + 1<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    ]);<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>a</em> = <em class='s1'>c</em> - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>b</em> = <em class='s1'>d</em>;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em><em class='l1'>    </em><em class='s2'>}</em>,<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>replacement</em>     = <em class='s1'>function</em> <em class='s2'>diffview__opcodes_replacement</em>() <em class='s2'>{</em><em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    do {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        <em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>c</em>]][0] = <em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>c</em>]][0] - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        <em class='s1'>table</em>[<em class='s1'>two</em>[<em class='s1'>d</em>]][1] = <em class='s1'>table</em>[<em class='s1'>two</em>[<em class='s1'>d</em>]][1] - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        <em class='s1'>c</em>                = <em class='s1'>c</em> + 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        <em class='s1'>d</em>                = <em class='s1'>d</em> + 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    } while (<em class='s1'>c</em> &lt; <em class='s1'>lena</em> &amp;&amp; <em class='s1'>d</em> &lt; <em class='s1'>lenb</em> &amp;&amp; <em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>c</em>]][1] &gt; 0 &amp;&amp; <em class='s1'>table</em>[<em class='s1'>two</em>[<em class='s1'>d</em>]][0] &gt; 0);<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>fix</em>(["replace", <em class='s1'>a</em>, <em class='s1'>c</em>, <em class='s1'>b</em>, <em class='s1'>d</em>]);<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>a</em> = <em class='s1'>c</em> - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>b</em> = <em class='s1'>d</em> - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em><em class='l1'>    </em><em class='s2'>}</em>,<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>replaceUniques</em>  = <em class='s1'>function</em> <em class='s2'>diffview__opcodes_replaceUniques</em>() <em class='s2'>{</em><em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    do {<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        <em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>c</em>]][0] = <em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>c</em>]][0] - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        <em class='s1'>c</em>                = <em class='s1'>c</em> + 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>        <em class='s1'>d</em>                = <em class='s1'>d</em> + 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    } while (<em class='s1'>c</em> &lt; <em class='s1'>lena</em> &amp;&amp; <em class='s1'>d</em> &lt; <em class='s1'>lenb</em> &amp;&amp; <em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>c</em>]][1] &lt; 1 &amp;&amp; <em class='s1'>table</em>[<em class='s1'>two</em>[<em class='s1'>d</em>]][0] &lt; 1);<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>fix</em>(["replace", <em class='s1'>a</em>, <em class='s1'>c</em>, <em class='s1'>b</em>, <em class='s1'>d</em>]);<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>a</em> = <em class='s1'>c</em> - 1;<em>&#xA;</em></li><li class='l2'><em class='l0'>    </em><em class='l1'>    </em>    <em class='s1'>b</em> = <em class='s1'>d</em> - 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em><em class='l1'>    </em><em class='s2'>}</em>;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em><em>&#xA;</em></li><li class='l1'><em class='l0'>    </em><em>&#xA;</em></li><li class='l1'><em class='l0'>    </em><em>&#xA;</em></li><li class='c0'>    // * First Pass, account for lines from first file<em>&#xA;</em></li><li class='c0'>    // * build the table from the second file<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>do {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    if (options.diffspaceignore === true) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>two</em>[<em class='s1'>b</em>] = <em class='s1'>two</em>[<em class='s1'>b</em>].replace(/\s+/g, "");<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    if (<em class='s1'>table</em>[<em class='s1'>two</em>[<em class='s1'>b</em>]] === undefined) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>table</em>[<em class='s1'>two</em>[<em class='s1'>b</em>]] = [0, 1];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    } else {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>table</em>[<em class='s1'>two</em>[<em class='s1'>b</em>]][1] = <em class='s1'>table</em>[<em class='s1'>two</em>[<em class='s1'>b</em>]][1] + 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>b</em> = <em class='s1'>b</em> + 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>} while (<em class='s1'>b</em> &lt; <em class='s1'>lenb</em>);<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em><em>&#xA;</em></li><li class='l1'><em class='l0'>    </em><em>&#xA;</em></li><li class='l1'><em class='l0'>    </em><em>&#xA;</em></li><li class='c0'>    // * Second Pass, account for lines from second file<em>&#xA;</em></li><li class='c0'>    // * build the table from the first file<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em><em class='s1'>lena</em> = <em class='s1'>one</em>.length;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em><em class='s1'>a</em>    = 0;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>do {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    if (options.diffspaceignore === true) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>one</em>[<em class='s1'>a</em>] = <em class='s1'>one</em>[<em class='s1'>a</em>].replace(/\s+/g, "");<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    if (<em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>a</em>]] === undefined) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>a</em>]] = [1, 0];<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    } else {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>a</em>]][0] = <em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>a</em>]][0] + 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>a</em> = <em class='s1'>a</em> + 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>} while (<em class='s1'>a</em> &lt; <em class='s1'>lena</em>);<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em><em class='s1'>a</em> = 0;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em><em class='s1'>b</em> = 0;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em><em>&#xA;</em></li><li class='c0'>    // find all equality... differences are what's left over solve only for the<em>&#xA;</em></li><li class='c0'>    // second set test removing reverse test removing undefined checks for table<em>&#xA;</em></li><li class='c0'>    // refs<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em><em>&#xA;</em></li><li class='c0'><em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>do {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>c</em> = <em class='s1'>a</em>;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>d</em> = <em class='s1'>b</em>;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    if (<em class='s1'>one</em>[<em class='s1'>a</em>] === <em class='s1'>two</em>[<em class='s1'>b</em>]) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>equality</em>();<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    } else if (<em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>a</em>]][1] &lt; 1 &amp;&amp; <em class='s1'>table</em>[<em class='s1'>two</em>[<em class='s1'>b</em>]][0] &lt; 1) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>replaceUniques</em>();<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    } else if (<em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>a</em>]][1] &lt; 1 &amp;&amp; <em class='s1'>one</em>[<em class='s1'>a</em> + 1] !== <em class='s1'>two</em>[<em class='s1'>b</em> + 2]) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>deletion</em>();<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    } else if (<em class='s1'>table</em>[<em class='s1'>two</em>[<em class='s1'>b</em>]][0] &lt; 1 &amp;&amp; <em class='s1'>one</em>[<em class='s1'>a</em> + 2] !== <em class='s1'>two</em>[<em class='s1'>b</em> + 1]) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>insertion</em>();<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    } else if (<em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>a</em>]][0] - <em class='s1'>table</em>[<em class='s1'>one</em>[<em class='s1'>a</em>]][1] === 1 &amp;&amp; <em class='s1'>one</em>[<em class='s1'>a</em> + 1] !== <em class='s1'>two</em>[<em class='s1'>b</em> + 2]) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>deletionStatic</em>();<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    } else if (<em class='s1'>table</em>[<em class='s1'>two</em>[<em class='s1'>b</em>]][1] - <em class='s1'>table</em>[<em class='s1'>two</em>[<em class='s1'>b</em>]][0] === 1 &amp;&amp; <em class='s1'>one</em>[<em class='s1'>a</em> + 2] !== <em class='s1'>two</em>[<em class='s1'>b</em> + 1]) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>insertionStatic</em>();<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    } else if (<em class='s1'>one</em>[<em class='s1'>a</em> + 1] === <em class='s1'>two</em>[<em class='s1'>b</em>]) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>deletion</em>();<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    } else if (<em class='s1'>one</em>[<em class='s1'>a</em>] === <em class='s1'>two</em>[<em class='s1'>b</em> + 1]) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>insertion</em>();<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    } else {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>replacement</em>();<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>a</em> = <em class='s1'>a</em> + 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>b</em> = <em class='s1'>b</em> + 1;<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>} while (<em class='s1'>a</em> &lt; <em class='s1'>lena</em> &amp;&amp; <em class='s1'>b</em> &lt; <em class='s1'>lenb</em>);<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>if (<em class='s1'>lena</em> - <em class='s1'>a</em> === <em class='s1'>lenb</em> - <em class='s1'>b</em>) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    if (<em class='s1'>one</em>[<em class='s1'>a</em>] === <em class='s1'>two</em>[<em class='s1'>b</em>]) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>fix</em>(["equal", <em class='s1'>a</em>, <em class='s1'>lena</em>, <em class='s1'>b</em>, <em class='s1'>lenb</em>]);<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    } else {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>        <em class='s1'>fix</em>(["replace", <em class='s1'>a</em>, <em class='s1'>lena</em>, <em class='s1'>b</em>, <em class='s1'>lenb</em>]);<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    }<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>} else if (<em class='s1'>a</em> &lt; <em class='s1'>lena</em>) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>fix</em>(["delete", <em class='s1'>a</em>, <em class='s1'>lena</em>, -1, -1]);<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>} else if (<em class='s1'>b</em> &lt; <em class='s1'>lenb</em>) {<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>    <em class='s1'>fix</em>(["insert", -1, -1, <em class='s1'>b</em>, <em class='s1'>lenb</em>]);<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>}<em>&#xA;</em></li><li class='l1'><em class='l0'>    </em>return <em class='s1'>codes</em>;<em>&#xA;</em></li><li class='l0'><em class='s1'>}</em><em>&#xA;</em></li></ol></div>
                    </div>
                </div>
            </section>
        </div>
        <script src="../lib/global.js" type="application/javascript"></script>
        <script src="../api/dom.js" type="application/javascript"></script>
    </body>
</html>
